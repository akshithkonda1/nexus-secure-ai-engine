name: CI
on:
  pull_request:
  push:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PORT: 8080

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - uses: actions/checkout@v4

      # Frontend quality (adjust paths as needed)
      - uses: actions/setup-node@v4
        with: { node-version: '20' }
      - name: Frontend install
        working-directory: nexus/ai/frontend
        run: |
          corepack enable
          pnpm install
      - name: Frontend typecheck & build
        working-directory: nexus/ai/frontend
        run: |
          pnpm tsc --noEmit
          pnpm build

      # Log in to GHCR
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Generate image metadata and safe tags
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: latest=false
          tags: |
            type=sha
            type=ref,event=branch
            type=ref,event=pr

      # Build and push image
      - name: Build & push
        id: build-and-push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Export compose image ref
        run: |
          FIRST_TAG=$(printf '%s\n' "${{ steps.meta.outputs.tags }}" | head -n1)
          echo "CI_IMAGE_REF=${FIRST_TAG}" >> "$GITHUB_ENV"

      # Trivy scan (container)
      - name: Trivy Scan
        uses: aquasecurity/trivy-action@0.22.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build-and-push.outputs.digest }}
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'HIGH,CRITICAL'

      # Integration smoke with compose + k6
      - name: Compose smoke
        run: scripts/ci-smoke.sh
      - name: k6 smoke
        uses: grafana/k6-action@v0.3.1
        with:
          filename: ./k6/smoke.js
        env:
          BASE_URL: http://localhost:8080

      - name: Tear down
        if: always()
        run: docker compose -f docker-compose.ci.yml down -v
