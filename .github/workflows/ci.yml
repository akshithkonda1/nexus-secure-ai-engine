name: ci
on:
  push: { branches: ["**"] }
  pull_request: {}

jobs:
  qa:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }
      - name: Install deps
        run: |
          python -m pip install -U pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install ruff==0.6.9 black==24.8.0 mypy bandit pip-audit prometheus-client
      - name: Lint & type
        run: |
          ruff check .
          black --check .
          mypy || true  # relax during alpha; tighten later
      - name: Security
        run: |
          bandit -r . || true
          if [ -f requirements.txt ]; then pip-audit -r requirements.txt || true; fi

  docker:
    needs: qa
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - name: Build image
        run: docker build -t ghcr.io/${{ github.repository }}:${{ github.sha }} .
      - name: Trivy scan
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ghcr.io/${{ github.repository }}:${{ github.sha }}
          format: 'table'
          vuln-type: 'os,library'
          exit-code: '0'      # loosen in alpha
          severity: 'CRITICAL,HIGH'
      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Push image
        run: docker push ghcr.io/${{ github.repository }}:${{ github.sha }}

  k6:
    needs: docker
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Authenticate to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull container image
        run: docker pull ghcr.io/${{ github.repository }}:${{ github.sha }}

      - name: Launch gateway for smoke test
        env:
          IMAGE: ghcr.io/${{ github.repository }}:${{ github.sha }}
          MODEL_JSON: >-
            {"defaults":{"timeout":1,"max_retries":1},"models":[{"name":"stub","endpoint":"https://example.com/api","auth":{"type":"bearer","value":"token"}}]}
        run: |
          docker run -d --name nexus-alpha -p 8080:8080 \
            -e AUTHORIZED_API_KEYS=test-ci-key \
            -e TRUSTED_ORIGINS=https://example.com \
            -e NEXUS_MODELS_JSON="$MODEL_JSON" \
            -e NEXUS_ALLOW_TEST_FALLBACKS=1 \
            -e NEXUS_HEALTH_ENABLE=0 \
            -e NEXUS_ENFORCE_HTTPS=0 \
            -e NEXUS_ALLOW_ALL_MODELS=1 \
            -e NEXUS_TENANT_ID=tenant-ci \
            -e NEXUS_INSTANCE_ID=instance-ci \
            -e NEXUS_DEFAULT_USER_ID=user-ci \
            -e NEXUS_RATE_LIMIT_STORAGE_URL=memory:// \
            -e NEXUS_RATE_LIMITS="100/minute,1000/day" \
            -e NEXUS_SECRET_NEXUS_DATA_KEY_B64=MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA= \
            -e ALPHA_ACCESS_TOKEN=ci-alpha-token \
            "$IMAGE"

          for _ in $(seq 1 30); do
            if curl -fsS http://127.0.0.1:8080/readyz > /dev/null; then
              READY=1
              break
            fi
            sleep 2
          done

          if [ "${READY:-0}" -ne 1 ]; then
            echo "Gateway failed readiness probe" >&2
            docker logs nexus-alpha || true
            exit 1
          fi

      - name: k6 smoke
        run: |
          docker run --rm --network container:nexus-alpha \
            -e BASE_URL=http://127.0.0.1:8080 \
            -e ALPHA_ACCESS_TOKEN=ci-alpha-token \
            -v "$PWD/tests":/tests:ro \
            grafana/k6:0.49.0 run /tests/k6_smoke.js

      - name: Collect container logs
        if: always()
        run: docker logs nexus-alpha || true

      - name: Stop gateway
        if: always()
        run: docker rm -f nexus-alpha || true

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [docker, k6]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Generate SBOM
        uses: anchore/syft-action@v0.17.0
        with:
          image: ghcr.io/${{ github.repository }}:${{ github.sha }}
          output: sbom.spdx.json
      - name: GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: sbom.spdx.json
