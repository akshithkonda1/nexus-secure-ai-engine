name: CI

on:
  push:
    branches: ["main", "work"]
  pull_request:

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "20"

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Ruff lint
        run: ruff check .

      - name: Black formatting check
        run: black --check .

      - name: Mypy static analysis
        run: mypy --config-file mypy-ci.ini nexus.ai tests

  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Run pytest
        run: pytest --cov=nexus.ai --cov-report=xml

  frontend:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Node.js
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install frontend dependencies
        working-directory: Frontend
        run: npm install --no-fund --no-audit

      - name: Lint frontend
        working-directory: Frontend
        run: npm run lint

      - name: Frontend unit tests
        working-directory: Frontend
        run: npm run test

      - name: Build frontend
        working-directory: Frontend
        run: npm run build

  security:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Bandit SAST
        run: bandit -c pyproject.toml -r nexus.ai

      - name: pip-audit
        run: pip-audit -r requirements.txt -r requirements-dev.txt --strict

  build:
    runs-on: ubuntu-latest
    needs: [test, frontend, security]
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image
        run: docker build --tag nexus-ai:latest .

      - name: Trivy image scan
        uses: aquasecurity/trivy-action@0.33.1
        with:
          scan-type: image
          image-ref: nexus-ai:latest
          severity: HIGH,CRITICAL
          ignore-unfixed: true
          format: table

  sbom:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Generate SBOM
        uses: anchore/syft-action@v1
        with:
          path: .
          output: sbom/syft-spdx.json

      - name: Upload SBOM artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom/syft-spdx.json

  smoke:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Start stub model connector
        run: |
          python - <<'PY' &
          import json
          from http.server import BaseHTTPRequestHandler, HTTPServer

          class Handler(BaseHTTPRequestHandler):
              def do_POST(self):
                  length = int(self.headers.get("content-length", "0"))
                  if length:
                      self.rfile.read(length)
                  body = json.dumps({
                      "choices": [{"message": {"content": "stub-response"}}],
                      "usage": {"prompt_tokens": 1, "completion_tokens": 1},
                  }).encode()
                  self.send_response(200)
                  self.send_header("Content-Type", "application/json")
                  self.send_header("Content-Length", str(len(body)))
                  self.end_headers()
                  self.wfile.write(body)

              def log_message(self, *args, **kwargs):
                  return

          HTTPServer(("127.0.0.1", 9000), Handler).serve_forever()
          PY
          echo $! > stub.pid

      - name: Start Nexus API gateway
        env:
          AUTHORIZED_API_KEYS: smoke-key
          TRUSTED_ORIGINS: https://ci.example.com
          NEXUS_ALLOW_TEST_FALLBACKS: "1"
          NEXUS_ALLOW_ALL_MODELS: "1"
          NEXUS_RATE_LIMIT_STORAGE_URL: memory://
          NEXUS_RATE_LIMITS: "500/minute,10000/hour"
          NEXUS_TENANT_ID: smoke-tenant
          NEXUS_INSTANCE_ID: smoke-instance
          NEXUS_DEFAULT_USER_ID: smoke-user
          NEXUS_DATA_KEY_B64: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=
          NEXUS_HEALTH_ENABLE: "0"
          NEXUS_ENV: ci
          FLASK_HOST: 127.0.0.1
          FLASK_PORT: "8080"
        run: |
          export NEXUS_MODELS_JSON='{"defaults":{"timeout":1,"max_retries":0},"models":[{"name":"stub-model","endpoint":"http://127.0.0.1:9000/v1/chat/completions","auth":{"type":"bearer","value":"stub"},"adapter":"openai.chat"}]}'
          nohup gunicorn -b 127.0.0.1:8080 nexus.ai.nexus_flask_app:app >/tmp/gunicorn.log 2>&1 &
          echo $! > gunicorn.pid
          for _ in $(seq 1 30); do
            if curl -fsS http://127.0.0.1:8080/healthz >/dev/null; then
              exit 0
            fi
            sleep 1
          done
          echo "Gateway failed to start" >&2
          cat /tmp/gunicorn.log >&2 || true
          exit 1

      - name: Install k6
        uses: grafana/setup-k6-action@v0.7.0

      - name: Run k6 smoke test
        env:
          NEXUS_API_KEY: smoke-key
          NEXUS_BASE_URL: http://127.0.0.1:8080
        run: k6 run --vus 25 --duration 1m tests/load/k6-smoke.js

      - name: Show smoke logs on failure
        if: failure()
        run: |
          echo "--- stub connector ---"
          cat stub.pid >/dev/null 2>&1 && ps -p $(cat stub.pid) || true
          echo "--- gunicorn log ---"
          cat /tmp/gunicorn.log || true

      - name: Cleanup background services
        if: always()
        run: |
          if [ -f gunicorn.pid ]; then
            kill $(cat gunicorn.pid) 2>/dev/null || true
          fi
          if [ -f stub.pid ]; then
            kill $(cat stub.pid) 2>/dev/null || true
          fi
